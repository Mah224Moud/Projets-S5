<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="class_date" kind="class" language="C++" prot="public">
    <compoundname>Date</compoundname>
    <includes refid="_date_8h" local="yes">Date.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_date_1a51a979c64305d841600f0a25b39d01f8" prot="private" static="no" mutable="no">
        <type><ref refid="structtm" kindref="compound">tm</ref> *</type>
        <definition>tm* Date::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="30" column="12" bodyfile="Date.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_date_1a4e59ed4ba66eec61c27460c5d09fa1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Date::Date</definition>
        <argsstring>()</argsstring>
        <name>Date</name>
        <briefdescription>
<para>Constructeur par défaut de la classe <ref refid="class_date" kindref="compound">Date</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructueur par défaut.</para>
<para>Avec le constructeur par défaut, la date est initialisé à la date courante </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="34" column="9" bodyfile="Date.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1af3efa227a00ac2ae993c424ca62c340c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Date::Date</definition>
        <argsstring>(const int, const int, const int)</argsstring>
        <name>Date</name>
        <param>
          <type>const int</type>
          <defname>day</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>month</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>year</defname>
        </param>
        <briefdescription>
<para>Constructeur avec paramètre jour, mois et année de la classe <ref refid="class_date" kindref="compound">Date</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructeur avec paramètre.</para>
<para>Avec ce constructeur, on indique le jour, le mois et l&apos;année souhaité <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>day</parametername>
</parameternamelist>
<parameterdescription>
<para>: le jour; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>: le mois; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>: l&apos;année; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="36" column="9" bodyfile="Date.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1a961e64bff2fdff7ee95bc335ca400d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Date::getJour</definition>
        <argsstring>()</argsstring>
        <name>getJour</name>
        <briefdescription>
<para>Récuperer le jour. </para>
        </briefdescription>
        <detaileddescription>
<para>Récupération du jour de la date.</para>
<para><simplesect kind="return"><para>un entier qui représente le jour </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="39" column="13" bodyfile="Date.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1a6b16211abaa2c22418e82b8cd9d08bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Date::getMois</definition>
        <argsstring>()</argsstring>
        <name>getMois</name>
        <briefdescription>
<para>Récuperer le mois. </para>
        </briefdescription>
        <detaileddescription>
<para>Récupération du mois de la date.</para>
<para><simplesect kind="return"><para>un entier qui représente le mois </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="41" column="13" bodyfile="Date.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1a99c5677274bdaffadaedad4c888ccbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Date::getAnnee</definition>
        <argsstring>()</argsstring>
        <name>getAnnee</name>
        <briefdescription>
<para>Récuperer l&apos;annee. </para>
        </briefdescription>
        <detaileddescription>
<para>Récupération de l&apos;année de la date.</para>
<para><simplesect kind="return"><para>un entier qui représente l&apos;année </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="43" column="13" bodyfile="Date.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1a53dcab03c7834448fd67ef453ff34195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtm" kindref="compound">tm</ref></type>
        <definition>tm Date::getDate</definition>
        <argsstring>()</argsstring>
        <name>getDate</name>
        <briefdescription>
<para>Récupération de la date. </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction renvoie l&apos;instance tm pointée par d. <simplesect kind="return"><para>une tm contenant la date; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="45" column="12" bodyfile="Date.cpp" bodystart="65" bodyend="68"/>
        <referencedby refid="class_contact_1a48b48fa54c3da3e928b3315735cf3b74" compoundref="_contact_8cpp" startline="77" endline="81">Contact::modification</referencedby>
        <referencedby refid="main_8cpp_1afc5a38f6d3b4f52e00189d54a2989b39" compoundref="main_8cpp" startline="31" endline="63">testContact</referencedby>
        <referencedby refid="main_8cpp_1a402bc28ea282ebe068abeedcbc9834a5" compoundref="main_8cpp" startline="223" endline="246">testDateComparator</referencedby>
        <referencedby refid="main_8cpp_1aa8474a2c8d2877d00c2756cf694cfde6" compoundref="main_8cpp" startline="158" endline="221">testGestionContact</referencedby>
        <referencedby refid="main_8cpp_1afc7eece9c0111c5505f2a7f7478f2950" compoundref="main_8cpp" startline="248" endline="298">testGestionInteraction</referencedby>
        <referencedby refid="main_8cpp_1a0633cf092e43a8515e33ffc610ed3a3f" compoundref="main_8cpp" startline="93" endline="156">testGestionTodo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_date_1af7f644265141e1b856af83715177a7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Date::setDate</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>setDate</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="46" column="14" bodyfile="Date.cpp" bodystart="74" bodyend="77"/>
        <referencedby refid="class_gestion_interaction_1aa74a8ff644a48518c10b4b8d7932e6ae" compoundref="_gestion_interaction_8cpp" startline="36" endline="57">GestionInteraction::addInteraction</referencedby>
        <referencedby refid="main_8cpp_1a402bc28ea282ebe068abeedcbc9834a5" compoundref="main_8cpp" startline="223" endline="246">testDateComparator</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_date_1a21c46ba7a74d45d1299f92330a43533a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Date::fromDate</definition>
        <argsstring>(const int day, const int month, const int year)</argsstring>
        <name>fromDate</name>
        <param>
          <type>const int</type>
          <declname>day</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>month</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Récupération en fonction des paramètres day, month et year d&apos;une structure tm contenant la date définie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>day</parametername>
</parameternamelist>
<parameterdescription>
<para>: le jour de la nouvelle date </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>: le mois de la nouvelle date </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>: l&apos;année de la nouvelle date </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="48" column="14" bodyfile="Date.cpp" bodystart="85" bodyend="96"/>
        <referencedby refid="main_8cpp_1afc5a38f6d3b4f52e00189d54a2989b39" compoundref="main_8cpp" startline="31" endline="63">testContact</referencedby>
        <referencedby refid="main_8cpp_1a402bc28ea282ebe068abeedcbc9834a5" compoundref="main_8cpp" startline="223" endline="246">testDateComparator</referencedby>
        <referencedby refid="main_8cpp_1aa8474a2c8d2877d00c2756cf694cfde6" compoundref="main_8cpp" startline="158" endline="221">testGestionContact</referencedby>
        <referencedby refid="main_8cpp_1afc7eece9c0111c5505f2a7f7478f2950" compoundref="main_8cpp" startline="248" endline="298">testGestionInteraction</referencedby>
        <referencedby refid="main_8cpp_1a0633cf092e43a8515e33ffc610ed3a3f" compoundref="main_8cpp" startline="93" endline="156">testGestionTodo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_date_1adebdb45904dc2fbfacc66aa7528e0c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string Date::toString</definition>
        <argsstring>()</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Récupération de la date avec le format jj/mm/aaaa. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Chaine de caractère contenant la date </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="49" column="21" bodyfile="Date.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1ab6e18eb4e080c723df03af0be4f0487e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Date::operator==</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>autre</defname>
        </param>
        <briefdescription>
<para>Surchage de l&apos;opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction compare deux dates. Elle renvoie true si les jours, mois et années sont identiques. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autre</parametername>
</parameternamelist>
<parameterdescription>
<para>: le tm à comparer avec le tm de la date actuelle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>un booléen : true si les deux dates ont même jour, même mois et même année et false sinon. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="51" column="14" bodyfile="Date.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1a57f91c24d27b9fe6796c27e12d9deb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Date::operator&lt;</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>autre</defname>
        </param>
        <briefdescription>
<para>Surcharge de l&apos;opérateur de comparaison inférieur. </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction compare deux dates. Elle renvoie true si la date actuelle est antérieure à l&apos;autre date. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autre</parametername>
</parameternamelist>
<parameterdescription>
<para>: le tm à comparer avec le tm de la date actuelle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>un booléen : true si la date actuelle est antérieure à autre. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="52" column="9" bodyfile="Date.cpp" bodystart="126" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1af2d295ce56665af6996174ededddd34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Date::operator&gt;</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>autre</defname>
        </param>
        <briefdescription>
<para>Surcharge de l&apos;opérateur de comparaison supérieur. </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction compare deux dates. Elle renvoie true si la date actuelle est supérieure à l&apos;autre date. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autre</parametername>
</parameternamelist>
<parameterdescription>
<para>: le tm à comparer avec le tm de la date actuelle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>un booléen : true si la date actuelle est supérieure à autre. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="53" column="14" bodyfile="Date.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1ac14ca0dd0252bcc04f23a74d4fb3ed4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Date::operator&lt;=</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>autre</defname>
        </param>
        <briefdescription>
<para>Surcharge de l&apos;opérateur de comparaison inférieur ou égale. </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction compare deux dates. Elle renvoie true si la date actuelle est inférieure ou égale à l&apos;autre date. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autre</parametername>
</parameternamelist>
<parameterdescription>
<para>: le tm à comparer avec le tm de la date actuelle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>un booléen : true si la date actuelle est inférieure ou égale à autre. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="54" column="9" bodyfile="Date.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_date_1ac6e262f05512614bcbb89762e85b353c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Date::operator&gt;=</definition>
        <argsstring>(const tm &amp;)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structtm" kindref="compound">tm</ref> &amp;</type>
          <defname>autre</defname>
        </param>
        <briefdescription>
<para>Surcharge de l&apos;opérateur de comparaison supérieur ou égale. </para>
        </briefdescription>
        <detaileddescription>
<para>Cette fonction compare deux dates. Elle renvoie true si la date actuelle est supérieure ou égale à l&apos;autre date. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autre</parametername>
</parameternamelist>
<parameterdescription>
<para>: le tm à comparer avec le tm de la date actuelle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>un booléen : true si la date actuelle est supérieure ou égale à autre. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Date.h" line="55" column="14" bodyfile="Date.cpp" bodystart="160" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>La classe <ref refid="class_date" kindref="compound">Date</ref> permet de stocker des dates dans des structures tm. </para>
    </briefdescription>
    <detaileddescription>
<para>La classe <ref refid="class_date" kindref="compound">Date</ref> permet <itemizedlist>
<listitem><para>de stocker une date, par défaut la date du système; </para>
</listitem>
<listitem><para>de récuperer séparement le jour, le mois et l&apos;année; </para>
</listitem>
<listitem><para>de récuperer la date sous forme de string; </para>
</listitem>
</itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Date</label>
        <link refid="class_date"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-d</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>tm</label>
        <link refid="structtm"/>
      </node>
    </collaborationgraph>
    <location file="Date.h" line="22" column="1" bodyfile="Date.h" bodystart="23" bodyend="56"/>
    <listofallmembers>
      <member refid="class_date_1a51a979c64305d841600f0a25b39d01f8" prot="private" virt="non-virtual"><scope>Date</scope><name>d</name></member>
      <member refid="class_date_1a4e59ed4ba66eec61c27460c5d09fa1bd" prot="public" virt="non-virtual"><scope>Date</scope><name>Date</name></member>
      <member refid="class_date_1af3efa227a00ac2ae993c424ca62c340c" prot="public" virt="non-virtual"><scope>Date</scope><name>Date</name></member>
      <member refid="class_date_1a21c46ba7a74d45d1299f92330a43533a" prot="public" virt="non-virtual"><scope>Date</scope><name>fromDate</name></member>
      <member refid="class_date_1a99c5677274bdaffadaedad4c888ccbca" prot="public" virt="non-virtual"><scope>Date</scope><name>getAnnee</name></member>
      <member refid="class_date_1a53dcab03c7834448fd67ef453ff34195" prot="public" virt="non-virtual"><scope>Date</scope><name>getDate</name></member>
      <member refid="class_date_1a961e64bff2fdff7ee95bc335ca400d2f" prot="public" virt="non-virtual"><scope>Date</scope><name>getJour</name></member>
      <member refid="class_date_1a6b16211abaa2c22418e82b8cd9d08bfe" prot="public" virt="non-virtual"><scope>Date</scope><name>getMois</name></member>
      <member refid="class_date_1a57f91c24d27b9fe6796c27e12d9deb93" prot="public" virt="non-virtual"><scope>Date</scope><name>operator&lt;</name></member>
      <member refid="class_date_1ac14ca0dd0252bcc04f23a74d4fb3ed4e" prot="public" virt="non-virtual"><scope>Date</scope><name>operator&lt;=</name></member>
      <member refid="class_date_1ab6e18eb4e080c723df03af0be4f0487e" prot="public" virt="non-virtual"><scope>Date</scope><name>operator==</name></member>
      <member refid="class_date_1af2d295ce56665af6996174ededddd34e" prot="public" virt="non-virtual"><scope>Date</scope><name>operator&gt;</name></member>
      <member refid="class_date_1ac6e262f05512614bcbb89762e85b353c" prot="public" virt="non-virtual"><scope>Date</scope><name>operator&gt;=</name></member>
      <member refid="class_date_1af7f644265141e1b856af83715177a7e7" prot="public" virt="non-virtual"><scope>Date</scope><name>setDate</name></member>
      <member refid="class_date_1adebdb45904dc2fbfacc66aa7528e0c04" prot="public" virt="non-virtual"><scope>Date</scope><name>toString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
